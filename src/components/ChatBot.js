import { useState, useEffect } from 'react';

export default function ChatBot() {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);

  // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è AI
  const systemPrompt = `
    MansapWay ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∫–æ–ª–ª–µ–¥–∂–µ–π –Ω–∞–π—Ç–∏ —Å–≤–æ—ë –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. 

    –¢—ã - AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç MansapWay. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
    1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫—Ä–∞—Ç–∫–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–µ—Ä–≤–∏—Å
    2. –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    3. –î–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ
    4. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö —Å–µ—Ä–≤–∏—Å–∞
    5. –ë—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º

    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ:
    - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–≤—ã–∫–∏, –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ç—Ä–µ–Ω–¥—ã —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞ –†–ö
    - –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º —Å–ø—Ä–æ—Å–æ–º
    - –ü–æ–¥–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è –∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏
    - –£–∂–µ –ø–æ–º–æ–≥–ª–∏ 7000+ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    - –°–∞–π—Ç: mansapway.kz

    –í–∞–∂–Ω–æ:
    - –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ)
    - –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –¥–∏–∞–ª–æ–≥ –≤–æ–ø—Ä–æ—Å–∞–º–∏
  `;
// 1. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

  useEffect(() => {
  const savedMessages = localStorage.getItem('chatMessages');
  if (savedMessages) {
    setMessages(JSON.parse(savedMessages));
  }
}, []);

// 2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏

useEffect(() => {
  if (messages.length > 0) {
    localStorage.setItem('chatMessages', JSON.stringify(messages));
  }
}, [messages]);


  useEffect(() => {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
    if (isOpen && messages.length === 0) {
      const greeting = {
        role: 'assistant',
        content: '–ü—Ä–∏–≤–µ—Ç! –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç MansapWay. –ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é. –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?'
      };
      setMessages([greeting]);
    }
  }, [isOpen]);

  const toggleChat = () => setIsOpen(!isOpen);

  const sendMessage = async () => {
    if (!input.trim() || isTyping) return;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessage = { role: 'user', content: input };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsTyping(true);

    try {
      const res = await fetch('http://localhost:3001/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          message: input,
          systemPrompt: systemPrompt // –ü–µ—Ä–µ–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç
        }),
      });

      const data = await res.json();
      const botMessage = { 
        role: 'assistant', 
        content: data.reply || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
      };
      setMessages(prev => [...prev, botMessage]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      const errorMessage = {
        role: 'assistant',
        content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsTyping(false);
    }
  };

  // –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã
  const quickQuestions = [
    '–ö–∞–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω—ã?',
    '–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ?',
    '–ö–∞–∫–∏–µ –∫–æ–ª–ª–µ–¥–∂–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—é—Ç?'
  ];

  return (
    <>
      {/* Floating Chat Button */}
      <button
        onClick={toggleChat}
        className="fixed bottom-6 right-6 bg-indigo-600 text-white p-4 rounded-full shadow-lg hover:bg-indigo-700 transition-all z-50 flex items-center"
      >
        {isOpen ? (
          <span className="text-xl">‚úï</span>
        ) : (
          <>
            <span className="text-xl mr-2">ü§ñ</span>
            <span className="text-sm font-medium text-white">–ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è</span>
          </>
        )}
      </button>

      {/* Chat Window */}
      {isOpen && (
        <div className="fixed bottom-24 right-6 w-96 bg-white border border-gray-200 rounded-lg shadow-xl flex flex-col z-50 overflow-hidden">
          {/* Header */}
{/* Header */}
<div className="bg-indigo-600 p-4 text-white font-semibold flex justify-between items-center relative">
  <div className="flex items-center">
    <div className="w-8 h-8 bg-white rounded-full flex items-center justify-center mr-3">
      <span className="text-indigo-600 text-lg">MW</span>
    </div>
    <div>
      <div>MansapWay Assistant</div>
      <div className="text-xs font-normal opacity-80">
        {isTyping ? '–ü–µ—á–∞—Ç–∞–µ—Ç...' : '–û–Ω–ª–∞–π–Ω'}
      </div>
    </div>
  </div>

  {/* –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ */}
<button
  onClick={() => {
    setMessages([]);
    localStorage.removeItem('chatMessages');
  }}
  className="text-white hover:text-red-300 text-lg ml-2 transition"
  title="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"
>
  üóë
</button>

</div>

          {/* Messages */}
          <div className="p-4 flex-1 overflow-y-auto max-h-96 bg-gray-50">
            {messages.map((msg, i) => (
              <div
                key={i}
                className={`mb-3 flex ${
                  msg.role === 'user' ? 'justify-end' : 'justify-start'
                }`}
              >
                <div
                  className={`max-w-xs p-3 rounded-lg ${
                    msg.role === 'user'
                      ? 'bg-indigo-100 text-gray-800 rounded-tr-none text-start'
                      : 'bg-white border text-black border-gray-200 rounded-tl-none text-start shadow-sm'
                  }`}
                >
                  {msg.content}
                </div>
              </div>
            ))}

            {/* Quick Questions */}
            {messages.length <= 1 && (
              <div className="mt-4">
                <div className="text-xs text-gray-500 mb-2">–ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å:</div>
                <div className="flex flex-wrap gap-2 text-gray-500">
                  {quickQuestions.map((q, i) => (
                    <button
                      key={i}
                      onClick={() => {
                        setInput(q);
                        setTimeout(sendMessage, 100);
                      }}
                      className="text-xs bg-gray-100 hover:bg-gray-200 px-3 py-1.5 rounded-full transition"
                    >
                      {q}
                    </button>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Input Area */}
          <div className="border-t border-gray-200 p-3 bg-white">
            <div className="flex">
              <input
                type="text"
                className="flex-1 p-2 outline-none text-black bg-gray-50 rounded-l-lg border border-r-0 border-gray-300 focus:border-indigo-400 focus:ring-1 focus:ring-indigo-100"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyDown={(e) => e.key === 'Enter' && sendMessage()}
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                disabled={isTyping}
              />
              <button
                onClick={sendMessage}
                disabled={isTyping}
                className="px-4 bg-indigo-600 text-white rounded-r-lg hover:bg-indigo-700 disabled:opacity-50 transition"
              >
                {isTyping ? '...' : '–û—Ç–ø—Ä'}
              </button>
            </div>
            <div className="text-xs text-gray-500 mt-2 text-center">
              MansapWay ¬© {new Date().getFullYear()}
            </div>
          </div>
        </div>
      )}
    </>
  );
}